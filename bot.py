import os
import re
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, CallbackQueryHandler
)
from telegram.error import NetworkError, TimedOut, Forbidden

TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–û–¢_BOTFATHER" #–¢–æ–∫–µ–Ω tg
ADMIN_ID = –í–ê–®_ID   #A–¥–º–∏–Ω ID

#–§–∞–π–ª—ã –ï—Å–ª–∏ –±—É–¥–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä <—É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–æ–≤>
USERS_FILE = "users.txt" #–•—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
LOG_FILE = "bot.log" #–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
STATS_FILE = "stats.txt" #–í–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π

last_request_time = {}

def write_log(message: str):
    line = f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {message}"
    print(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")

def load_users():
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        return f.read().splitlines()

def save_user(user_id: int, username: str | None):
    record = f"{user_id} ({username})"
    users = load_users()
    if record not in users:
        with open(USERS_FILE, "a", encoding="utf-8") as f:
            f.write(record + "\n")

def remove_user(user_id: int):
    users = load_users()
    new_users = [u for u in users if not u.startswith(str(user_id))]
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        f.write("\n".join(new_users))

def update_stats(user_id: int, username: str | None):
    stats = {}
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            for line in f:
                uid, count = line.strip().split(":", 1)
                stats[uid] = int(count)

    key = f"{user_id} ({username})"
    stats[key] = stats.get(key, 0) + 1

    with open(STATS_FILE, "w", encoding="utf-8") as f:
        for k, v in stats.items():
            f.write(f"{k}:{v}\n")

#/start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    save_user(user.id, user.username)
    write_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –Ω–∞–∂–∞–ª /start")

    keyboard = [[InlineKeyboardButton("üî• –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –∫—É–ø–∏—Ç—å –∫–ª—é—á", url="https://t.me/VTSLYVPN_bot")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (TikTok, YouTube Shorts, Instagram Reels/–ø–æ—Å—Ç—ã/—Å—Ç–æ—Ä–∏—Å—ã), "
        "–∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –±–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤.",
        reply_markup=reply_markup
    )

#yt_dlp model
async def run_yt_dlp(url: str) -> str | None:
    proc = await asyncio.create_subprocess_exec(
        "yt-dlp", url,
        "--max-filesize", "49M",
        "--no-playlist",
        "--no-continue",
        "--retries", "3",
        "--http-chunk-size", "5M",
        "--restrict-filenames",
        "-f", "mp4/best",
        "-o", "downloaded_video.%(ext)s",
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )

    try:
        stdout, stderr = await asyncio.wait_for(proc.communicate(), timeout=120)
    except asyncio.TimeoutError:
        proc.kill()
        write_log("[ERROR] yt-dlp timeout (–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)")
        return None

    out = stdout.decode("utf-8", errors="ignore")
    err = stderr.decode("utf-8", errors="ignore")

    write_log(f"yt-dlp stdout:\n{out}")
    if err.strip():
        write_log(f"yt-dlp stderr:\n{err}")

    match = re.search(r"\[download\] Destination: (.+)", out)
    if match:
        filename = match.group(1).strip()
        if os.path.exists(filename):
            size = os.path.getsize(filename) / 1024 / 1024
            write_log(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {filename}, —Ä–∞–∑–º–µ—Ä: {size:.2f} MB")
            return filename

    write_log("[ERROR] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    return None

#–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã 
def detect_platform(url: str) -> str:
    if "tiktok.com" in url:
        return "üìπ TikTok"
    elif "youtube.com" in url or "youtu.be" in url:
        return "üé• YouTube Shorts"
    elif "instagram.com" in url:
        return "üì∏ Instagram"
    else:
        return "üåç –í–∏–¥–µ–æ"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    user = update.effective_user

    try:
        #–ê–Ω—Ç–∏—Å–ø–∞–º
        now = datetime.now()
        if user.id in last_request_time:
            if now - last_request_time[user.id] < timedelta(seconds=10):
                await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–æ–π (–ª–∏–º–∏—Ç 1 –≤–∏–¥–µ–æ / 10 —Å–µ–∫—É–Ω–¥).")
                write_log(f"[WARN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏")
                return
        last_request_time[user.id] = now

        if not url.startswith(("http://", "https://")):
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
            write_log(f"[WARN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É: {url}")
            return

        await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        write_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—Ä–æ—Å–∏–ª: {url}")

        video_file = await run_yt_dlp(url)
        if not video_file:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
            write_log(f"[ERROR] –í–∏–¥–µ–æ –Ω–µ —Å–∫–∞—á–∞–Ω–æ –¥–ª—è {user.id}: {url}")
            return

        try:
            platform = detect_platform(url)
            update_stats(user.id, user.username)

            write_log(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            with open(video_file, "rb") as f:
                await update.message.reply_video(
                    video=f,
                    caption=f"{platform}\n–°–ø–∞—Å–∏–±–æ –Ω–∞—à–µ–º—É —Å–ø–æ–Ω—Å–æ—Ä—É @VTSLYVPN_bot üôè"
                )
            write_log(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        finally:
            if os.path.exists(video_file):
                os.remove(video_file)
                write_log(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {video_file}")

    except (NetworkError, TimedOut):
        write_log(f"[ERROR] –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    except Exception as e:
        write_log(f"[ERROR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.")

#–ê–¥–º–∏–Ω–∫–∞
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    keyboard = [
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ (—Ç–µ–∫—Å—Ç)", callback_data="broadcast_text")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ (—Å –∫–Ω–æ–ø–∫–æ–π)", callback_data="broadcast_btn")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    await update.message.reply_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "broadcast_text":
        context.user_data["broadcast_mode"] = "text"
        await query.edit_message_text("‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

    elif query.data == "broadcast_btn":
        context.user_data["broadcast_mode"] = "btn"
        await query.edit_message_text("‚úç –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–¢–µ–∫—Å—Ç | –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ | –°—Å—ã–ª–∫–∞")

    elif query.data == "stats":
        stats = {}
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, "r", encoding="utf-8") as f:
                for line in f:
                    uid, count = line.strip().split(":", 1)
                    stats[uid] = int(count)
        text = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(load_users())}\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π:\n"
        for k, v in stats.items():
            text += f"{k}: {v}\n"
        await query.edit_message_text(text)

async def admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    mode = context.user_data.get("broadcast_mode")
    if not mode:
        await handle_message(update, context)
        return

    text = update.message.text.strip()
    users = load_users()
    success, fail = 0, 0

    if mode == "text":
        for u in users:
            uid = int(u.split(" ")[0])
            try:
                await context.bot.send_message(uid, text)
                success += 1
            except Forbidden:
                remove_user(uid)
                fail += 1
            except Exception:
                fail += 1
        write_log(f"[ADMIN] –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞: \"{text}\" | –£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–∫–∏: {fail}")
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–∫–∏: {fail}")

    elif mode == "btn":
        parts = text.split("|")
        if len(parts) != 3:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: –¢–µ–∫—Å—Ç | –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ | –°—Å—ã–ª–∫–∞")
            return
        msg, btn_text, btn_url = map(str.strip, parts)
        markup = InlineKeyboardMarkup([[InlineKeyboardButton(btn_text, url=btn_url)]])
        for u in users:
            uid = int(u.split(" ")[0])
            try:
                await context.bot.send_message(uid, msg, reply_markup=markup)
                success += 1
            except Forbidden:
                remove_user(uid)
                fail += 1
            except Exception:
                fail += 1
        write_log(f"[ADMIN] –†–∞—Å—Å—ã–ª–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π: \"{msg}\" ({btn_text} ‚Üí {btn_url}) | –£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–∫–∏: {fail}")
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–∫–∏: {fail}")

    context.user_data["broadcast_mode"] = None

# --- MAIN ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(CallbackQueryHandler(admin_buttons))
    app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), admin_message))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    write_log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
